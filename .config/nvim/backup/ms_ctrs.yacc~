(* file: ms_ctrs.yacc *)
(* description: parser generator for reading MS-CTRS format file *)
(* author: Takahito Aoto *)

local 
    structure LU = ListUtil
    structure L = List
in
open Term
open ManySorted

exception Error

type cond_rules = (term * term * (term * term) list) list

datatype tpdb_decl = SIG of ms_sign | RULES of cond_rules | CONDITIONTYPE of string list | CONJECTURES of (term * term) list 
type tpdb_result = ms_sign * cond_rules * string * (term * term) list

(* それぞれのパートの union をとる *)
fun getCategory f xss = let val yss = List.mapPartial f xss in LU.mapAppend (fn x=>x) yss end
val getSIG = getCategory (fn top => case top of SIG xs => SOME xs | _ => NONE) 
val getRULES = getCategory (fn top => case top of RULES xs => SOME xs | _ => NONE)
val getCONJECTURES = getCategory (fn top => case top of CONJECTURES xs => SOME xs | _ => NONE)
val getCONDITIONTYPE = getCategory (fn top => case top of CONDITIONTYPE xs => SOME xs | _ => NONE)

fun replaceVar fnames (Var x) = Var x
  | replaceVar fnames (Fun (f,ts)) = 
    if ListUtil.member f fnames
    then let val ts2 = L.map (replaceVar fnames) ts
         in Fun (f,ts2)
         end
    else if null ts 
    then Var (Var.fromString f)
    else (print ("Error: sort unspecified for function " ^ f ^ "\n"); raise Error)

fun checkCondTypes ctypes = 
    if length ctypes = 1
       andalso let val str = hd ctypes
               in (str = "ORIENTED")  orelse (str = "JOIN")  orelse (str = "SEMI-EQUATIONAL")
               end
    then ()
    else (print "Error: invalid condition type specification\n"; raise Error)

fun getDecl decls = let val ms_sign = getSIG decls
			val rs0 = getRULES decls
			val fnames = List.map (fn (f,_) => f) ms_sign
			fun trans t = replaceVar fnames t
			val rs = L.map (fn (l,r,cs) => (trans l, trans r, L.map (fn (u,v)=> (trans u, trans v)) cs)) rs0
			val ctypes0 = getCONDITIONTYPE decls
			val _ = checkCondTypes ctypes0
			val ctype = hd ctypes0
			val conj0 = getCONJECTURES decls
			val conj = L.map (fn (l,r) => (trans l, trans r)) conj0
		    in  (ms_sign, rs, ctype, conj)
		    end

end 
(* ユーザ定義部 *)
%%
%name		MsCtrs
%term           ID of string
              | STR of string
              | LPAREN
              | RPAREN
              | COMMA
              | VERT
              | ARROW
              | DEQ
              | EQ
              | SIG
              | RULES
              | CONDITIONTYPE
              | CONJECTURES
              | EOF 

%nonterm	XstartX of tpdb_result
              | XspecX of tpdb_decl list
              | XfunlistX of (string * (string list * string)) list
              | XfunX of  string * (string list * string)
              | XsortX of string list * string
              | XidlistX of string list
              | XrulelistX of (term * term * (term * term) list) list
              | XruleX of term * term * (term * term) list
              | XcondlistX of (term * term) list
              | XcondX of term * term
              | XeqlistX of (term * term) list
              | XeqX of term * term
              | XtermlistX of term list
              | XtermX of term
              | XanylistX of unit
              | XanyX of unit
%pos	   	int
%eop		EOF
%noshift	EOF

%%
XstartX:      XspecX                       (getDecl XspecX)
XspecX:       LPAREN SIG XfunlistX RPAREN XspecX               (SIG XfunlistX::XspecX)
            | LPAREN RULES XrulelistX RPAREN XspecX            (RULES XrulelistX::XspecX)
            | LPAREN CONJECTURES XeqlistX RPAREN XspecX        (CONJECTURES XeqlistX::XspecX)
            | LPAREN CONDITIONTYPE ID RPAREN XspecX            (CONDITIONTYPE [ID]::XspecX)
            | LPAREN ID XanylistX RPAREN XspecX                (XspecX)
            |                              ([])
XfunlistX:    XfunX XfunlistX              (XfunX::XfunlistX)
            |                              ([])
XfunX:        LPAREN ID XsortX RPAREN      ((ID, XsortX))
XsortX:       XidlistX ARROW ID            ((XidlistX,ID))
XidlistX:     ID XidlistX                  (ID::XidlistX)
            |                              ([])
XrulelistX:    XruleX  XrulelistX          (XruleX::XrulelistX)
            |                              ([])
XruleX:       XtermX ARROW XtermX VERT XcondlistX  ((XtermX1,XtermX2,XcondlistX))
            | XtermX ARROW XtermX          ((XtermX1,XtermX2,[]))
XcondlistX:   XcondX COMMA XcondlistX      (XcondX::XcondlistX)
            | XcondX                       ([XcondX])
XcondX:       XtermX DEQ XtermX            ((XtermX1,XtermX2))
XeqlistX:     XeqX  XeqlistX               (XeqX::XeqlistX)
            |                              ([])
XeqX:         XtermX EQ XtermX             ((XtermX1,XtermX2))
XtermX:       ID                           (Fun (ID,[]))
            | ID LPAREN RPAREN             (Fun (ID,[]))
            | ID LPAREN XtermlistX RPAREN  (Fun (ID,XtermlistX))
XtermlistX:   XtermX COMMA XtermlistX      (XtermX::XtermlistX)
            | XtermX 			   ([XtermX])
XanylistX:    XanyX XanylistX              ()
            |                              ()
XanyX:        ID                           ()
            | STR                          ()
            | LPAREN XanylistX RPAREN      ()
            | ARROW                        ()
            | COMMA                        ()
            | SIG                          ()
            | RULES                        ()
